/ * for语句的嵌入* /
1，对1到n的阶乘求和，代码如下：
#include <stdio.h>

int main（void）{
    int i，j;
    int n = 0;
    int sum = 0;
    整数乘积
    
    printf（“请输入n：”）
    scanf（“％d”，＆n）;
    / *外层循环，阶乘求和* /
    for（i = 1; i <= n; ++ i）{
        / *内层循环，求i的阶乘* /
        for（j = 1;，product = 1; j <= i; ++ j）{
           乘积* = j;
        }
        总和==乘积；
    }
    printf（“ sum =％d”，sum）;
    返回0;
 }
 2，输出水仙花数。所谓水仙花数，是指一个三位数，其代表数字立方之和等于该数本身。代码如下：
 #include <stdio.h>
 int main（void）{
     int a，b，c;
     水仙
     printf（“ Naraissus数字：\ n”）;
     for（a = 1; a <10; ++ a）{
         for（b = 0; b <10; ++ b）{
            for（c = 0; c <10; ++ c）{
                水仙= a * 100 + b * 10 + c;
                
                if（a * a * a + b * b * b + c * c * c ==水仙）
                    printf（“％5d”，narcissus）;
            }
         }
     }
  printf（“ \ n”）;
  
  返回0;
  }
  运行结果为：
    153370371407
/ * while语句示例* /
1，求Fibonacci数列
Fibonacci数列有以下特点，其第一第二项除外1，从第三个数开始，该数是前两个数的和，即：
                        1 n = 1
                F（n）= 1 n = 2
                        F（n-2）+ F（N-1）n> 2
求小于n的最大Fibonacci数，代码如下：
#include <stdio.h>

int main（void）{
    int n = 0;
    int tmp = 0;
    int f1 = 1;
    int f2 = 1;
    
    printf（“请输入n：”）;
    scanf（“％d”，＆n）;
    
    / *求小于n的最大fibonacci数* /
    而（f2 <2）{
        / * f1为上一个fibonacci数，f2为本次得到的fibonacci数* /
        tmp = f2;
        f2 = f1 + f2;
        f1 = tmp;
    }
    / * f1为小于n的最大fibonacci数，/ f2为大于或等于n的最小fibonacci数* /
    printf（“小于％d的最大斐波那契数是％d。\ n”，n.f1，）;
    
    返回0;
 }
 输出结果为：
           请输入n：14
           小于14的最大数量为13。
 2，求两个整数的最大公约数和最小公倍数，算法步骤如下：
 （1）对已知的两个整数m和n，使m大于或等于n
 （2）m除以n得余数r
 （3）若余数r等于0，则n为求得的最大公约数，算法结束
 （4）若r不等于0，将n置为r，将m置为n，继续执行第二步
  在得到m和n的最大公约数后，可以下式得到两个的最小公倍数：最小公倍数=两个整数之积/最大公约数
  实现代码如下：
  #include <stdio.h>
  
  int main（void）{
  int m，n，r;
  整数乘积
  int tmp;
  
  printf（“请输入两个数字：\ n”）;
  scanf（“％d％d”，m，n）;
  
  积= m * n;
  
  如果（m <n）{
      / *交换m和n * /
      tmp = m;
      m = n；
      n = tmp;
  }
  
  / *使用旋转转相除法求最大公约数* /
  r = m％n;
  while（r！= 0）{
      m = n；
      n = r;
      r = m＆n;
  }
  
  / *输出结果* /
  printf（“最大公约数为：％d \ n”，n）;
  printf（“最小公倍数为：％d \ n”，product / n）;
  
  返回0;
  }
  / * do-while语句* /
  1，输入一个大于70的整数
  代码如下：
  #include <stdio.h>
  
  int main（void）{
      int n = 0;
      做{
          printf（“请输入n（> 70）：”）;
          scanf（“％d”，＆n）;
      }同时（n <= 70）;
      
      printf（“ n =％d \ n”，n）;
      
      返回0;
  }
  明显像这种情况，用do-while语句更简洁。
  2，输入7个整数
  （1）用do-while语句：
  #include <stdio.h>
  
  int main（void）{
      int count = 1;
      int n = 0;
      
      做{
          printf（“请输入数字[％d]：”，count）;
          scanf（“％d”，＆n）;
          ++ count;
      }同时（计数<8）；
      
      返回0;
  }
  （2）用while语句：
  #include <stdio.h>
  
  int main（void）{
      int count = 1;
      int n = 0;
      
      while（count <8）{
          printf（“请输入数字[％d]：”，count）;
          scanf（“％d”，＆n）;
          ++ count;
      }
      
      返回0;
   }
  两种实现中，循环体都被执行了7次，但是循环条件判断的执行次数不一样，前者执行了6次，而执行了7次。
  / * break语句* /
  （1）用break语句终止多层循环
   输入3 * 3矩阵，暂时元素求和，元素必须是正数，实现代码如下：
   #include <stdio.h>
   
   int main（void）{
       int i，j;
       数据
       int sum = 0;
       
       const int m = 3;
       const int n = 3;
       
       printf（“请输入％d *％d矩阵：\ n”，i，j）;
       
       for（i = 0; i <m; ++ i）
           for（j = 0; j <n; ++ j）
               printf（“ matrix [％d] [％d]（> 0）=”，i，j）;
               scanf（“％d”，＆data）;
               
               if（数据<= 0）{
                   printf（“错误：错误的数据！！！存在内循环\ n”）;
                   打破;
               }
               
               总和==数据;
           }
           
           if（数据<= 0）{
               printf（“错误：错误的数据！！！存在外循环\ n”）;
               打破;
           }
       }
       
       if（i == m && j == n）{
           printf（“此矩阵中的数字总和为％d。\ n”，sum）;
           
       返回0;
   }
   注意：break语句只能跳出本层循环。若要跳出多层循环，则需要多次调用break语句。
   / * goto语句* /
   goto语句由关键字goto和一个代码中存在的标签名组成。
   goto标记名
   其执行逻辑为：当程序执行该步骤后，将无条件替换到标记名所在位置，然后执行该位置后面的代码。
   使用goto语句实现的死循环，示例代码如下：
   #include <stdio.h>
   
   int main（void）{
   无限循环：
       printf（“这是一个无限循环！！ \ n”）;
       转到infinite_loop;
       
       返回0;
   }
   程序执行后，进入了死循环，反复打印“他是一个无限循环！！！”

