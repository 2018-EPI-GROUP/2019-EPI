#include<stdio.h>
#include<stdlib.h>
#define LEN sizeof(struct student)
struct student
{
	long num;
	float score;
	struct student* next;
};
struct student* create()  //创建链表函数
{
	struct student * head = NULL, * p1, * p2;
	int n = 0;
	p1 = p2 = (struct student*)malloc(LEN);
	printf("input num,score(if num=0 stop):\n");
	scanf("%1d%f", &p1->num, &p1->score);
	while (p1->num != 0)
	{
		n = n + 1;
		if (n == 1)head = p1;
		else
			p2->next = p1;
		p2 = p1;
		p1 = (struct student*)malloc(LEN);
		scanf("%1d%f", &p1->num, &p1->score);
	}
	p2->next = NULL;
	return head;
}
void print(struct student* head)   //输出链表
{
	struct student* p;
	p = head;
	printf("output list:\n");
	while (p != NULL)
	{
		printf("%1d\t%.2f\n", p->num, p->score);
		p = p->next;
	}
	printf("\n");
}
int main()
{
	struct student* head_a, * head_b, * p1, * p2, * p3;
	long num;
	float score;
	printf("input list a:\n");
	head_a = create();
	printf("input list b:\n");
	head_b = create();
	p1 = head_a;
	while (p1->next != NULL)
	{
		p1 = p1->next;
		p1->next = head_b;
	}
	for (p1 = head_a;p1->next != NULL;p2 = p2->next)
	{
		if (p3->num > p2->num)
			p3 = p2;
		if (p1 != p3)
		{
			num = p1->num;
			p1->num = p3->num;
			p3->num = num;
			score = p1->score;
			p1->score = p3->score;
			p3->score = score;
		}
	}
	printf("head_a");
	return 0;
}
