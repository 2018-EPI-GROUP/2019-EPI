/ * for语句的嵌入* /
1，对1到n的阶乘求和，代码如下：
#include <stdio.h>

int main（void）{
    int i，j;
    int n = 0;
    int sum = 0;
    整数乘积
    
    printf（“请输入n：”）
    scanf（“％d”，＆n）;
    / *外层循环，阶乘求和* /
    for（i = 1; i <= n; ++ i）{
        / *内层循环，求i的阶乘* /
        for（j = 1;，product = 1; j <= i; ++ j）{
           乘积* = j;
        }
        总和==乘积；
    }
    printf（“ sum =％d”，sum）;
    返回0;
 }
 2，输出水仙花数。所谓水仙花数，是指一个三位数，其代表数字立方之和等于该数本身。代码如下：
 #include <stdio.h>
 int main（void）{
     int a，b，c;
     水仙
     printf（“ Naraissus数字：\ n”）;
     for（a = 1; a <10; ++ a）{
         for（b = 0; b <10; ++ b）{
            for（c = 0; c <10; ++ c）{
                水仙= a * 100 + b * 10 + c;
                
                if（a * a * a + b * b * b + c * c * c ==水仙）
                    printf（“％5d”，narcissus）;
            }
         }
     }
  printf（“ \ n”）;
  
  返回0;
  }
  运行结果为：
    153370371407
/ * while语句示例* /
1，求Fibonacci数列
Fibonacci数列有以下特点，其第一第二项除外1，从第三个数开始，该数是前两个数的和，即：
                        1 n = 1
                F（n）= 1 n = 2
                        F（n-2）+ F（N-1）n> 2
求小于n的最大Fibonacci数，代码如下：
#include <stdio.h>

int main（void）{
    int n = 0;
    int tmp = 0;
    int f1 = 1;
    int f2 = 1;
    
    printf（“请输入n：”）;
    scanf（“％d”，＆n）;
    
    / *求小于n的最大fibonacci数* /
    而（f2 <2）{
        / * f1为上一个fibonacci数，f2为本次得到的fibonacci数* /
        tmp = f2;
        f2 = f1 + f2;
        f1 = tmp;
    }
    / * f1为小于n的最大fibonacci数，/ f2为大于或等于n的最小fibonacci数* /
    printf（“小于％d的最大斐波那契数是％d。\ n”，n.f1，）;
    
    返回0;
 }
 输出结果为：
           请输入n：14
           小于14的最大数量为13。
 2，求两个整数的最大公约数和最小公倍数，算法步骤如下：
 （1）对已知的两个整数m和n，使m大于或等于n
 （2）m除以n得余数r
 （3）若余数r等于0，则n为求得的最大公约数，算法结束
 （4）若r不等于0，将n置为r，将m置为n，继续执行第二步
  在得到m和n的最大公约数后，可以下式得到两个的最小公倍数：最小公倍数=两个整数之积/最大公约数
  实现代码如下：
  #include <stdio.h>
  
  int main（void）{
  int m，n，r;
  整数乘积
  int tmp;
  
  printf（“请输入两个数字：\ n”）;
  scanf（“％d％d”，m，n）;
  
  积= m * n;
  
  如果（m <n）{
      / *交换m和n * /
      tmp = m;
      m = n；
      n = tmp;
  }
  
  / *使用旋转转相除法求最大公约数* /
  r = m％n;
  while（r！= 0）{
      m = n；
      n = r;
      r = m＆n;
  }
  
  / *输出结果* /
  printf（“最大公约数为：％d \ n”，n）;
  printf（“最小公倍数为：％d \ n”，product / n）;
  
  返回0;
  }
  / * do-while语句* /
  1，输入一个大于70的整数
  代码如下：
  #include <stdio.h>
  
  int main（void）{
      int n = 0;
      做{
          printf（“请输入n（> 70）：”）;
          scanf（“％d”，＆n）;
      }同时（n <= 70）;
      
      printf（“ n =％d \ n”，n）;
      
      返回0;
  }
  明显像这种情况，用do-while语句更简洁。
  2，输入7个整数
  （1）用do-while语句：
  #include <stdio.h>
  
  int main（void）{
      int count = 1;
      int n = 0;
      
      做{
          printf（“请输入数字[％d]：”，count）;
          scanf（“％d”，＆n）;
          ++ count;
      }同时（计数<8）；
      
      返回0;
  }
  （2）用while语句：
  #include <stdio.h>
  
  int main（void）{
      int count = 1;
      int n = 0;
      
      while（count <8）{
          printf（“请输入数字[％d]：”，count）;
          scanf（“％d”，＆n）;
          ++ count;
      }
      
      返回0;
   }
  两种实现中，循环体都被执行了7次，但是循环条件判断的执行次数不一样，前者执行了6次，而执行了7次。
  / * break语句* /
  （1）用break语句终止多层循环
   输入3 * 3矩阵，暂时元素求和，元素必须是正数，实现代码如下：
   #include <stdio.h>
   
   int main（void）{
       int i，j;
       数据
       int sum = 0;
       
       const int m = 3;
       const int n = 3;
       
       printf（“请输入％d *％d矩阵：\ n”，i，j）;
       
       for（i = 0; i <m; ++ i）
           for（j = 0; j <n; ++ j）
               printf（“ matrix [％d] [％d]（> 0）=”，i，j）;
               scanf（“％d”，＆data）;
               
               if（数据<= 0）{
                   printf（“错误：错误的数据！！！存在内循环\ n”）;
                   打破;
               }
               
               总和==数据;
           }
           
           if（数据<= 0）{
               printf（“错误：错误的数据！！！存在外循环\ n”）;
               打破;
           }
       }
       
       if（i == m && j == n）{
           printf（“此矩阵中的数字总和为％d。\ n”，sum）;
           
       返回0;
   }
   注意：break语句只能跳出本层循环。若要跳出多层循环，则需要多次调用break语句。
   / * goto语句* /
   goto语句由关键字goto和一个代码中存在的标签名组成。
   goto标记名
   其执行逻辑为：当程序执行该步骤后，将无条件替换到标记名所在位置，然后执行该位置后面的代码。
   使用goto语句实现的死循环，示例代码如下：
   #include <stdio.h>
   
   int main（void）{
   无限循环：
       printf（“这是一个无限循环！！ \ n”）;
       转到infinite_loop;
       
       返回0;
   }
   程序执行后，进入了死循环，反复打印“他是一个无限循环！！！”
   / *二进制* /
   都是统一数据类型的许多数据元素按某种顺序分开在一起的集合。
   （1）使用循环语句给一维数组赋值并打印数组，实现方法如下：
   #include <stdio.h>
   ＃定义大小10
   
   int main（void）{
       int i = 0;
       int array [SIZE];
       
       for（i = 0; i <SIZE; ++ i）
           array [i] = i;
           
       for（i = 0; i <SIZE; ++ i）
           printf（“ array [％d] =％d”，i，array [i]“）;
       }
       返回0;
    }
    输出结果为：array [0] = 0
                数组[1] = 1
                数组[2] = 2
                数组[3] = 3
                数组[4] = 4
                数组[5] = 5
                数组[6] = 6
                数组[7] = 7
                数组[8] = 8
                数组[9] = 9
    （2）一维整数示例
     在一个无序序中中查找一个数，代码如下：
 #include <stdio.h>
 ＃定义大小10

 int main（void）{
    我
    int targrt;
    
    int sequence [SIZE] = {3,78,41,2,40,5,33,8,7,24};
    for（i = 0; i <SIZE; ++ i）
        printf（“％-4d”，sequence [i]）;
    printf（“ \ n输入目标值：”）;
    scanf（“％d”，＆target）;

    for（i = 0; i <SIZE; ++ i）
        if（sequence [i] ==目标）
            打破;
    }
    
    if（SIZE == i）
        printf（“在此序列中找不到％d。\ n”）；
    其他
        printf（“％d是此序列中的％dth（st / nd）元素\ n”，target，i + 1）;

    返回0;
 }
  当输入为4时，结果为找不到此序列中的4。
  当输入为7时，结果为7是此序列中的第9个（st / nd）元素。
   （3）数列排序
   把无序整数数列按照从大到小的顺序输出。示例代码如下：
   ①
   #include <stdio.h>
   ＃定义大小10
   
   int main（void）{
       int i，j;
       int键值[SIZE] = [0];
       int maxindex;
       int tmp;
       
       printf（“请输入％d个片段：\ n”，SIZE）;
       
       for（i = 0; i <SIZE; ++ i）
           scanf（“％d”，＆keyvalue [i]）;
           
       for（i = 0; i <SIZE-1; ++ i）
           maxindex = i;
           
           for（j = i + 1; j <SIZE; ++ j）
           
               if（keyvalue [maxindex] <keyvalue [j]）
                   maxindex = j;
                   
               if（maxindex！= i）{
               
                   tmp =键值[maxindex];
                   keyvalue [maxindex] <keyvalue [i];
                   keyvalue [i] = tmp;
               }
           }
           printf（“按升序打印这些整数：\ n”）;
           
           for（i = 0; i <SIZE; ++ i）
               printf（“％-4d”，keyvalue [i]“）;
               
           printf（“ \ n”）;
           
           返回0;
       }
       ②
       #include <stdio.h>
       ＃定义N
       
       int main（void）{
           int i，j，t;
           int array [N];
           printf（“请输入％d个整数”，N）;
           for（i = 0; i <= N-1; i ++）
               scanf（“％d”，＆array [i]）;
           for（i = 0; i <= N -2; i ++）{
               for（j = i + 1; j <= N-1; j ++）
                   if（array [i] <array [j]）{
                       t = array [i];
                       array [i] = array [j];
                       array [j] = t;
                   }
           }
           printf（“按升序打印这些整数：\ n”）;
           for（i = 0; i <= N-1; i ++）
               printf（“％d”，array [i]）;
           返回0;
        } 
        / *二维数组* /
        （1）访问二维数组元素
        给二位矩阵赋值，并输出赋值结果，实现代码如下：
        #include <stdio.h>
        ＃定义ROW_SIZE 5
        ＃定义COLUMN_SIZE 4
        
        int main（void）{
            int i = 0，j = 0;
            int array [ROW_SIZE] [COLUMN_SIZE];
            
            for（i = 0; i <ROW_SIZE; ++ i）{
                for（j = 0; j <COLUMN_SIZE; ++ j）
                    array [i] [j] = i * 10 + j;
            }
            
             for（i = 0; i <ROW_SIZE; ++ i）{
                for（j = 0; j <COLUMN_SIZE; ++ j）
                    printf（“ array [％d] [％d] =％2d”，i，j，array [i] [j]）;
                    
                printf（“ \ n”）;
             }
             
             返回0;
         }
         / *二维整数示例* /
         1，矩阵转置的实现
         使用两个副本实现矩阵的转置，方法一的代码如下：
         #include <stdio.h>
         ＃定义SIZE 4 / *分散容量* /
         
         int main（void）{
             int i，j;
             int array [SIZE] [SIZE] = {{0,1,2,3} / *定义并初始化二维数组* /
                               {4,5,6,7}
                               {8,9,10,11}
                               {12,13,14,15}}；
             int transpose [SIZE] [SIZE] = {0}; / *定义二维矩阵并初始化全为0 * /
             
             / *打印二维数组* /
             printf（“主数组：\ n”）; / *输出辅助信息* /
             for（i = 0; i <SIZE; ++ i）/ * i为行号* /
                 for（j = 0; j <SIZE; ++ j）/ * j为列号* /
                     printf（“ \ t％-4d”，array [i] [j]“）; / *输出第i行第j列元素* /
                 printf（“ \ n”）;
                 
              / *将副本转置结果存入另一个副本中* /   
              for（i = 0; i <SIZE; ++ i）{
                 for（j = 0; j <SIZE; ++ j）
                     转置[j] [i] =数组[i] [j];
                                                / *为transpose中第j行第i列元素* /
              }
              
              / *打印二维数组* /
              printf（“ \ n最终数组：\ n”）; / *输出辅助信息* /
              for（i = 0; i <SIZE; ++ i）
                  for（j = 0; j <SIZE; ++ j）
                      printf（“ \ t％-4d”，transpose [i] [j]）; / *输出第i行第j列元素* /
                  printf（“ \ n”）;
              }
              
                  返回0;
          }
     第377〜381行，使用4 * 4的数值矩阵序列将数组的全都元素初始化。
     第384〜388行，使用二层循环实现多重内容的输出。
     第391〜393行，完成了拆分转置并存到另一个数组中的过程，循环结束后，transpose的结果就是array的转置矩阵。
     第398〜402行与384〜388行的内容相同，输出数组内容。
     方法二：
     #include <stdio.h>
     ＃定义尺寸4
     
     int main（void）{
         int array [SIZE] [SIZE] = {{0,1,2,3} / *定义并初始化二维数组* /
                               {4,5,6,7}
                               {8,9,10,11}
                               {12,13,14,15}}；
         int tmp = 0;
         int i = 0;
         int j = 0;
         
         / *打印二维数组* /
             printf（“主数组：\ n”）; / *输出辅助信息* /
             for（i = 0; i <SIZE; ++ i）{/ * i为行号* /
                 for（j = 0; j <SIZE; ++ j）/ * j为列号* /
                     printf（“ \ t％-4d”，array [i] [j]“）; / *输出第i行第j列元素* /
                 printf（“ \ n”）;
             }
             
             
             for（i = 0; i <SIZE; ++ i）{                 
                 for（j = 0; j <SIZE; ++ j）{
                     
                     tmp = array [j] [i];
                     array [j] [i] = array [i] [j];
                     array [i] [j] = tmp;
                 }
             }
             
             
             printf（“ \ n最终数组：\ n”）; / *输出辅助信息* /
              for（i = 0; i <SIZE; ++ i）
                  for（j = 0; j <SIZE; ++ j）
                      printf（“ \ t％-4d”，transpose [i] [j]）; / *输出第i行第j列元素* /
                  printf（“ \ n”）;
              }
              
                  返回0;
         }
         使用这种方法也可以实现层叠的转置。
         / *多维整数示例* /
         看代码：
         #include <stdio.h>
         #include <stdlio.h> / *随机函数需要的头文件* /
         #include <time.h> / *函数time（）需要的头文件* /
         
         #define SIZE_13 / *一维多重容量* /
         #define SIZE_22 / *一维多重容量* /
         #define SIZE_33 / *一维多重容量* /
         #define SIZE_42 / *一维多重容量* /
         #define SIZE_53 / *一维多重容量* /
         
         int main（void）{
             int i1，i2，i3，i4，i5;
             int array [SIZE_1] [SIZE_2] [SIZE_3] [SIZE_4] [SIZE_5] = {0}；
                                                           / *定义一个五维整数，并全初始化为0 * /
             int main;
             
             / *使用随机数给分散赋值* /
             srand（（unsigned）time（NULL））; / *以当前时间为随机数的种子* /
             for（i1 = 0; i1 <SIZE_1; ++ i1）
                 for（i2 = 0; i2 <SIZE_2; ++ i2）
                     for（i3 = 0; i3 <SIZE_3; ++ i3）
                         for（i4 = 0; i4 <SIZE_4; ++ i4）
                             for（i5 = 0; i5 <SIZE_5; ++ 5）
                                 array [i1] [i2] [i3] [i4] [i5] = rand（）;
                                                           / *取下一个随机数，并赋值给多个元素* /
                                 
             min = array [0] [0] [0] [0] [0];
             
             / *在所有元素中查找替代* /
             for（i1 = 0; i1 <SIZE_1; ++ i1）/ *第一维* /
                 for（i2 = 0; i2 <SIZE_2; ++ i2）/ *第二维* /
                     for（i3 = 0; i3 <SIZE_3; ++ i3）/ *第三维* /
                         for（i4 = 0; i4 <SIZE_4; ++ i4）/ *第四维* /
                             for（i5 = 0; i5 <SIZE_5; ++ 5）{
                                                           / *第五维* /
                                 / *如果矩阵元素比min小，将其值赋值给min * /
                                 if（min> array [i1] [i2] [i3] [i4] [i5]）
                                     min = array [i1] [i2] [i3] [i4] [i5];
                                                           / *重新为min赋值* /
                              }
                              
             printf（“此集合的最小值为：％d”，min）; / *打印出预设* /
             
             返回0;
         }
         第473〜478行，使用了5个用于循环为五维数组赋值，各个循环变量依次为各维的索引值；第478行使用rand（）函数得到下一个随机数，赋值给相应的数组元素。
         第484〜494行，通过5层用于循环遍历5维数组，将其中所有元素与min进行比较，如果比min小，则将值赋值给min；最后，min肯定是替代。
         
         
         （对于这最后的文章，我对其中的srand（（unsigned）time（NULL））; / *以当前时间为随机数的种子* /这步
         ，以及头文件的概念基本上没有了解，仅属于转载，以后会花时间了解它们的。）
