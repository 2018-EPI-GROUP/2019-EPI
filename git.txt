配置git
1. $ git config --global user.name +用户名
2. $ git config --global user.email +邮箱


git的大致工作流程
git add +文件 将工作目录的文件提交到暂存区
git commit +文件名 将暂存区的文件提交到本地仓库
git push +文件名 将本地仓库的文件提交到远程仓库
git pull 把远程仓库的代码拉取到本地的目录
git init +仓库名 创建一个新的仓库
toush +文件名 新建一个文件 
git status 查看文件的状态
git commit -m ‘ 所提交的内容’
vi +文件名 编辑文件
gir add. 将所有的文件都放入暂存区里
git diff 比较工作目录和暂存区的差别
git diff HEAD 比较工作目录和本地仓库的差别
git diff --cached 比较暂存区和本地仓库的差别
git rm --cached +文件名 将放入暂存区的文件移除


git的储存
echo+"内容“>+文件名  创建”内容“的文件
git ls-files -s 查看暂存区的内容
git cat-file -p +hash值 查看hash所对应的内容
git cat-file -p +hush值|xxd 查看文件中的换行符
执行 git add 时
1.计算文件的hash值
将文件放入暂存区和生成blob类型的git对象
执行 git commit 时
1.计算目录的hash值
2.生成tree类型和commit类型的git对象
注：每个commit对象，保存的都是文件的完整内容
      除了初始的commit对象，其他的commit都有一个或多个parent
git的分支的作用就是跟踪文件的版本



git的分支
git log 查看当前提交的文件
git log --oneline  查看当前提交文件的hash值
分支具体的存储在 11 .git/refs/heads
cat .git/refs/heads/master 查看文件的内容
git commit --allow-emoty -m '空的提交'
git branch +分支名   新建一个分支
git checkout -b +分支名  创建分支然后自动切换到分支
git branch  查看当前有哪些分支
git checkout +分支名  切换分支
cat .git/HEAD 记录当前是在哪个分支上工作的
git log --oneline --decorate 显示当前有哪些分支及有哪些分支在commit上面

git branch +分支名+其他分支    只能在其他分支创建的文件继续操作
且在这种情况下想要查看所有的文件就要用 git log --oneline --all --decorate 来查看

gir log --oneline --all --decorate --graph 用图形化的方式进行查看所有文件
git config alias.logg "其他的代码"   给比较长的代码起一个别名

分支就是commit的应用
HEAD就是分支的引用
# stash命令
* **git checkout.  将工作区的修改删除**
* **git stash 将工作目录和暂存区的修改暂时的保存到一个地方**




